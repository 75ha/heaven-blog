<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咀嚼之味</title>
    <description>我是一名生活在上海的程序员，正在上海交通大学攻读软件工程硕士学位。 我喜欢前端的技术、喜欢研究不同的编程语言之间的联系与差异，最爱的编程语言是 JavaScript， 而我的梦想是成为一名独立游戏开发者。
</description>
    <link>http://jerryzou.com/</link>
    <atom:link href="http://jerryzou.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>CSS 到底算不算编程语言？——论 CSS 中的逻辑</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文在征得原作者 &lt;a href=&quot;https://twitter.com/csswizardry&quot;&gt;@csswizardry&lt;/a&gt; 同意的情况下，翻译自他博客中的文章：&lt;a href=&quot;http://csswizardry.com/2015/04/cyclomatic-complexity-logic-in-css/&quot;&gt;Cyclomatic Complexity: Logic in CSS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在过去的很长一段时间中，我们都说 CSS 是不带有任何逻辑的，意思是在 CSS 中没有控制流，也没有某种类似于其他编程语言的方式来组织 CSS。CSS 天生缺乏逻辑性的问题导致了预处理器的出现。然而业界却对 CSS 预处理器褒贬不一，支持预处理器的人认为这弥补了 CSS 缺失的特性；而反对预处理器的人则认为 CSS 的设计初衷就不应该带有逻辑性，他们认为根本不应该引入预处理器这个概念。&lt;/p&gt;

&lt;p&gt;然而，一种独特的思考方法最近突然蹦入了我的脑袋。它让我感到 CSS 确实拥有逻辑性！很少有人真正那么想过，这大概也是我们一直认为 CSS 的逻辑性匮乏的最大原因吧。&lt;/p&gt;

&lt;p&gt;我发现我们可以将复合选择器理解为：主体部分 + &lt;strong&gt;条件部分&lt;/strong&gt;。首先来看一个例子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.login-box&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.btn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*...*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这个复合选择器由主体部分是 &lt;code&gt;span&lt;/code&gt;，而条件部分是 &lt;code&gt;IF (inside .btn) AND IF (on a) AND IF (inside .login-box) AND IF (inside .sidebar) AND IF (on div)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;也就是说，一个选择器的每一部分都是一个 &lt;code&gt;if&lt;/code&gt; 语句，需要在解析选择器时被满足（或者不满足）。有了这种微妙的而又全新的认识，如今我们回头再看看自己曾经写出的 CSS 代码，我们将会意识到选择器写的好或者坏，会对效率产生直接的影响。我们真的会写出下面这段逻辑吗？（伪代码）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;@if exists(span) {&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  @if is-inside(.btn) {&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    @if is-on(a) {&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      @if is-inside(.login-box) {&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        @if is-inside(.sidebar) {&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;          @if is-on(div) {&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;            # Do this.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;          }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;也许不会。这看上去太不直接，也太啰嗦了。我们也许只需要这么写：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;@if exists(.btn-text) {&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  # Do this.&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每当为选择器添加一层限制，其实我们也就是添加了额外的一个 &lt;code&gt;if&lt;/code&gt; 语句。这会导致圈复杂度问题（Cyclomatic Complexity)。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;圈复杂度&lt;/h2&gt;

&lt;p&gt;在软件工程中，&lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;圈复杂度&lt;/a&gt;是一种程序复杂性的一种度量标准，它一般计算程序中的控制流的数量（如 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; 等）。程序中存在越多的控制流，则圈复杂度就越高。我们自然想要保证圈复杂度能够尽量地低，因为圈复杂度越高：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码就越难推导&lt;/li&gt;
  &lt;li&gt;更多潜藏着的、可能会导致失败的问题&lt;/li&gt;
  &lt;li&gt;代码更难以修改、维护以及复用&lt;/li&gt;
  &lt;li&gt;你需要考虑更多代码执行的结果与其副作用&lt;/li&gt;
  &lt;li&gt;编写测试代码的难度也会更高&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从圈复杂度的角度来思考 CSS 的解析过程，我们可以看到浏览器在渲染样式之前需要做许多的决定。我们写的选择器中的 &lt;code&gt;if&lt;/code&gt; 语句越多，这个选择器的&lt;strong&gt;圈复杂度就越高&lt;/strong&gt;，这也意味着我们写的选择器越糟糕，为了使得这一条选择器规则满足，就有需要匹配更多的条件。同时，我们写的选择器也会&lt;strong&gt;缺乏清晰度和复用性&lt;/strong&gt;，因为引入了过多不必要的 &lt;code&gt;if&lt;/code&gt; 语句会导致不准确的匹配(false positive)。&lt;/p&gt;

&lt;p&gt;相比于将 &lt;code&gt;span&lt;/code&gt; 嵌套于 &lt;code&gt;.btn&lt;/code&gt; 内部并写一大堆限制条件，更好地做法应该是创建一个新的类 &lt;code&gt;.btn-text&lt;/code&gt; 来描述这个 &lt;code&gt;span&lt;/code&gt;。这样做更加直截了当，同时也更为简洁和健壮（越多的 &lt;code&gt;@if&lt;/code&gt; 语句导致选择器规则越不容易被满足）。&lt;/p&gt;

&lt;p&gt;值得注意的是浏览器解析你写的选择器的方式：从右向左。如果你在写你的选择器时，第一个想到的问题是：“这是一个 &lt;code&gt;span&lt;/code&gt; 元素吗？” 那你通常就会把选择器写的过于冗繁。你应该从另一个角度思考，写出清晰准确的选择器规则，彻底摒弃那些冗余的条件语句。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;请不要写过于宽泛的规则，导致你写的选择器在匹配开始时就选中大量的 DOM 元素——然后不得不逐步通过更多的条件语句来删减匹配的对象。从选择器的规则解析的一开始就匹配尽量少的元素才是一种更棒的方法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;圈复杂度对于 CSS 来说可能是一种比较高阶的原则，但如果我们通过它来考量那些蕴含在我们写的选择器中的逻辑性，那我们也许就能写出更加优秀的代码。&lt;/p&gt;

&lt;p&gt;一些易于遵守的小规则，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;让你的选择器最简化&lt;/strong&gt;：每一次你想要为选择器添加规则时，你都在添加额外的 &lt;code&gt;if&lt;/code&gt; 语句。将这些 &lt;code&gt;if&lt;/code&gt; 语句大声地读出来，仔细考虑它们是否有添加的必要。你需要时刻保持你写的选择器足够合理与简洁。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;保证圈复杂度最小化&lt;/strong&gt;: 使用像 &lt;a href=&quot;https://github.com/katiefenn/parker&quot;&gt;Parker&lt;/a&gt; 这样的工具来测试你写的选择器的圈复杂度（参考文档：&lt;a href=&quot;https://github.com/katiefenn/parker/tree/master/docs/metrics#identifiers-per-selector&quot;&gt;Identifiers Per Selector&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果你不需要这个检验条件，那就不要把它放进选择器&lt;/strong&gt;: 有时在 CSS 中使用嵌套结构是有必要的，可在大多数时候并不是，你甚至不能完全相信&lt;a href=&quot;http://thesassway.com/beginner/the-inception-rule&quot;&gt;Inception Rule&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;从右边考虑选择器如何编写&lt;/strong&gt;: 从需要匹配的那类元素开始，写尽量少的额外的 CSS 代码来完成一次正确的匹配。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;写选择器时拥有&lt;a href=&quot;http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/&quot;&gt;明确的目的性&lt;/a&gt;&lt;/strong&gt;: 确保你写的选择器确实是你想要的，而不是那些碰巧能使得页面正常显示的代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你的选择器是你的 CSS 结构最基本的组成部分，一定要确保你写的代码足够合理而简练。&lt;/p&gt;

</description>
        <pubDate>Thu, 21 May 2015 08:55:25 +0000</pubDate>
        <link>http://jerryzou.com/posts/cyclomatic-complexity-logic-in-css/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/cyclomatic-complexity-logic-in-css/</guid>
      </item>
    
      <item>
        <title>为什么不要在 JavaScript 中使用位操作符？</title>
        <description>&lt;p&gt;如果你的第一门编程语言不是 JavaScript，而是 C++ 或 Java，那么一开始你大概会看不惯 JavaScript 的数字类型。在 JavaScript 中的数字类型是不区分什么 Int，Float，Double，Decimal 的。咳咳，我说的当然是在 ES6 之前的 JS，在 ES6 的新标准中提出了像 Int8Array 这样新的数据类型。不过这不是本文叙述的重点，暂且就不谈啦。本文将更着重地谈 JS 的数字类型以及作用于它的位操作符，而关于包装对象 Number 的更多了解可以看拔赤翻译的&lt;a href=&quot;https://github.com/lxj/javascript.patterns/blob/master/chapter3.markdown#%E5%8E%9F%E5%A7%8B%E5%80%BC%E7%9A%84%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1&quot;&gt;《JavaScript设计模式》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;数字类型的本质&lt;/h2&gt;

&lt;p&gt;实际上，JavaScript的数字类型的本质就是一个&lt;strong&gt;基于 IEEE 754 标准的双精度 64 位的浮点数&lt;/strong&gt;。按照标准，它的数据结构如图示这样：由1位符号位，11位指数部分以及52位尾数部分构成。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jerryblog-image.b0.upaiyun.com/blog/posts/double_float.png&quot; alt=&quot;general double float number&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在浮点数中，数字通常被表示为：&lt;/p&gt;

&lt;pre class=&quot;formula&quot;&gt;
(-1)&lt;sup&gt;sign&lt;/sup&gt; × mantissa × 2&lt;sup&gt;exponent&lt;/sup&gt;
&lt;/pre&gt;

&lt;p&gt;而为了将尾数规格化，并做到尽量提高精确度，就需要把尾数精确在 &lt;code&gt;[1,2)&lt;/code&gt; 的区间内，这样便可省去前导的1。比如：&lt;/p&gt;

&lt;pre class=&quot;formula&quot;&gt;
11.101 × 2&lt;sup&gt;3&lt;/sup&gt; = 1.1101 × 2&lt;sup&gt;4&lt;/sup&gt;
0.1001 × 2&lt;sup&gt;5&lt;/sup&gt; = 1.001 × 2&lt;sup&gt;4&lt;/sup&gt;
&lt;/pre&gt;

&lt;p&gt;并且标准规定指数部分使用 0x3ff 作为偏移量，也就有了双精度浮点数的一般公式：&lt;/p&gt;

&lt;pre class=&quot;formula&quot;&gt;
(-1)&lt;sup&gt;sign&lt;/sup&gt; × 1.mantissa × 2&lt;sup&gt;exponent - 0x3ff&lt;/sup&gt;
&lt;/pre&gt;

&lt;p&gt;举一些例子，应该能帮助你理解这个公式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;3ff0 0000 0000 0000  =  1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c000 0000 0000 0000  =  -2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3fd5 5555 5555 5555  ~  1/3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0000 0000 0000 0000  =  0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;8000 0000 0000 0000  =  -0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7ff0 0000 0000 0000  =  无穷大 ( 1/0 )&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;fff0 0000 0000 0000  =  负无穷大 ( 1/-0 )&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;7fef ffff ffff ffff  ~  1.7976931348623157 x 10^308 (= Number.MAX_VALUE)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;433f ffff ffff ffff  =  2^53 - 1 (= Number.MAX_SAFE_INTEGER)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;c33f ffff ffff ffff  =  -2^53 + 1 (= Number.MIN_SAFE_INTEGER)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;得益于尾数省略的一位“1”，使用双精度浮点数来表示的最大安全整数为 -2&lt;sup&gt;53&lt;/sup&gt;+1 到 2&lt;sup&gt;53&lt;/sup&gt;-1 之间，所以如果你仅仅使用 JavaScript 中的数字类型进行一些整数运算，那么你也可以近似地将这一数字类型理解为 &lt;strong&gt;53&lt;/strong&gt; 位整型。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;让人又爱又恨的位操作符&lt;/h2&gt;

&lt;p&gt;熟悉 C 或者 C++ 的同学一定对位操作符不陌生。位操作符最主要的应用大概就是作为标志位与掩码。这是一种节省存储空间的高明手段，在曾经内存的大小以 KB 为单位计算时，每多一个变量就是一份额外的开销。而使用位操作符的掩码则在很大程度上缓解了这个问题：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define LOG_ERRORS            1  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0001&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LOG_WARNINGS          2  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0010&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LOG_NOTICES           4  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0100&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LOG_INCOMING          8  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 1000&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_ERRORS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                 &lt;span class=&quot;c1&quot;&gt;// 0001&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_ERRORS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_WARNINGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_INCOMING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 1011&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为标志位一般只需要 1 bit，就可以保存，并没有必要为每个标志位都定义一个变量。所以按上面这种方式只使用一个变量，却可以保存大量的信息——无符号的 char 可以保存 8 个标志位，而无符号的 int 则可以同时表示 32 个标志位。&lt;/p&gt;

&lt;p&gt;可惜位操作符在 JavaScript 中的表现就比较诡异了，因为 JavaScript 没有真正意义上的整型。看看如下代码的运行结果吧：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 2000000000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// -294967296&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// fxck！我只想装了个逼用左移1位给 a * 2，但是结果是什么鬼！！！&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;100000000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4294967296&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1111&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 15&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// 15&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 啊啊啊，为毛我的 a 丝毫不起作用，JavaScript真是门吊诡的语言！！！&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好吧，虽然我说过大家可以近似地认为，JS 的数字类型可以表示 53 位的整型。但事实上，位操作符并不是这么认为的。在 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.10&quot;&gt;ECMAScript® Language Specification&lt;/a&gt; 中是这样描述位操作符的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The production A : A @ B, where @ is one of the bitwise operators in the productions above, is evaluated as follows:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Let lref be the result of evaluating A.&lt;/li&gt;
    &lt;li&gt;Let lval be GetValue(lref).&lt;/li&gt;
    &lt;li&gt;Let rref be the result of evaluating B.&lt;/li&gt;
    &lt;li&gt;Let rval be GetValue(rref).&lt;/li&gt;
    &lt;li&gt;Let lnum be &lt;strong&gt;ToInt32&lt;/strong&gt;(lval).&lt;/li&gt;
    &lt;li&gt;Let rnum be &lt;strong&gt;ToInt32&lt;/strong&gt;(rval).&lt;/li&gt;
    &lt;li&gt;Return the result of applying the bitwise operator @ to lnum and rnum. The result is a signed 32 bit integer.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;需要注意的是第5和第6步，按照ES标准，两个需要运算的值会被先转为&lt;strong&gt;有符号的32位整型&lt;/strong&gt;。所以超过32位的整数会被截断，而小数部分则会被直接舍弃。&lt;/p&gt;

&lt;p&gt;而反过来考虑，我们在什么情况下需要用到位操作符？使用左移来代替 2 的幂的乘法？Naive啊，等遇到像第一个例子的问题，你就要抓狂了。而且对一个浮点数进行左移操作是否比直接乘 2 来得效率高，这也是个值得商榷的问题。&lt;/p&gt;

&lt;p&gt;那用来表示标志位呢？首先，现在的内存大小已经不值得我们用精简几个变量来减少存储空间了；其次呢，使用标志位也会使得代码的可读性大大下降。再者，在 JavaScript 中使用位操作符的地方毕竟太少，如果你执意使用位操作符，未来维护这段代码的人又对 JS 中的位操作符的坑不熟悉，这也会造成不利的影响。&lt;/p&gt;

&lt;p&gt;所以，我对大家的建议是，尽量在 JavaScript 中别使用位操作符。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8&quot;&gt;维基百科：双精度浮点数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures&quot;&gt;MDN：JavaScript数据结构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;MDN：按位操作符&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18591924/how-to-use-bitmask&quot;&gt;How to use bitmask?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.10&quot;&gt;ECMAScript® Language Specification - 11.10 Binary Bitwise Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 15 May 2015 23:13:35 +0000</pubDate>
        <link>http://jerryzou.com/posts/do-you-really-want-use-bit-operators-in-JavaScript/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/do-you-really-want-use-bit-operators-in-JavaScript/</guid>
      </item>
    
      <item>
        <title>详说 Cookie, LocalStorage 与 SessionStorage</title>
        <description>&lt;p&gt;最近在找暑期实习，其中百度、网易游戏、阿里的面试都问到一些关于HTML5的东西，问题大多是这样开头的：“你用过什么HTML5的技术呀？” 而后，每次都能扯到 Cookie 和 localStorage 有啥差别。这篇文章就旨在详细地阐述这部分内容，而具体 Web Storage API 的使用可以参考&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API&quot;&gt;MDN的文档&lt;/a&gt;，就不在这篇文章中赘述了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本概念&lt;/h2&gt;

&lt;h4 id=&quot;cookie&quot;&gt;Cookie&lt;/h4&gt;

&lt;p&gt;Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。&lt;/p&gt;

&lt;h4 id=&quot;localstorage&quot;&gt;localStorage&lt;/h4&gt;

&lt;p&gt;localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;Chrome&lt;/th&gt;
      &lt;th&gt;Firefox (Gecko)&lt;/th&gt;
      &lt;th&gt;Internet Explorer&lt;/th&gt;
      &lt;th&gt;Opera&lt;/th&gt;
      &lt;th&gt;Safari (WebKit)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;localStorage&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;10.50&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sessionStorage&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;10.50&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;sessionstorage&quot;&gt;sessionStorage&lt;/h4&gt;

&lt;p&gt;sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;三者的异同&lt;/h2&gt;

&lt;table&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;特性&lt;/th&gt;
			&lt;th&gt;Cookie&lt;/th&gt;
			&lt;th&gt;localStorage&lt;/th&gt;
			&lt;th&gt;sessionStorage&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;数据的生命期&lt;/td&gt;
			&lt;td&gt;一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效&lt;/td&gt;
			&lt;td&gt;除非被清除，否则永久保存&lt;/td&gt;
			&lt;td&gt;仅在当前会话下有效，关闭页面或浏览器后被清除&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;存放数据大小&lt;/td&gt;
			&lt;td&gt;4K左右&lt;/td&gt;
			&lt;td colspan=&quot;2&quot;&gt;一般为5MB&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;与服务器端通信&lt;/td&gt;
			&lt;td&gt;每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题&lt;/td&gt;
			&lt;td colspan=&quot;2&quot;&gt;仅在客户端（即浏览器）中保存，不参与和服务器的通信&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;易用性&lt;/td&gt;
			&lt;td&gt;需要程序员自己封装，源生的Cookie接口不友好&lt;/td&gt;
			&lt;td colspan=&quot;2&quot;&gt;源生接口可以接受，亦可再次封装来对Object和Array有更好的支持&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;section-2&quot;&gt;应用场景&lt;/h4&gt;

&lt;p&gt;有了对上面这些差别的直观理解，我们就可以讨论三者的应用场景了。&lt;/p&gt;

&lt;p&gt;因为考虑到每个 HTTP 请求都会带着 Cookie 的信息，所以 Cookie 当然是能精简就精简啦，比较常用的一个应用场景就是判断用户是否登录。针对登录过的用户，服务器端会在他登录时往 Cookie 中插入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦。曾经还使用 Cookie 来保存用户在电商网站的购物车信息，如今有了 localStorage，似乎在这个方面也可以给 Cookie 放个假了~&lt;/p&gt;

&lt;p&gt;而另一方面 localStorage 接替了 Cookie 管理购物车的工作，同时也能胜任其他一些工作。比如HTML5游戏通常会产生一些本地数据，localStorage 也是非常适用的。如果遇到一些内容特别多的表单，为了优化用户体验，我们可能要把表单页面拆分成多个子页面，然后按步骤引导用户填写。这时候 sessionStorage 的作用就发挥出来了。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;安全性的考虑&lt;/h2&gt;

&lt;p&gt;需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的。使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。因为只要打开控制台，你就随意修改它们的值，也就是说如果你的网站中有 XSS 的风险，它们就能对你的 localStorage 肆意妄为。所以千万不要用它们存储你系统中的敏感数据。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookie&quot;&gt;what is the difference between localStorage, sessionStorage, session and cookie?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3718349/html5-localstorage-security&quot;&gt;HTML5 localStorage security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/Cookie&quot;&gt;维基百科 - Cookie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API&quot;&gt;Web Storage API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://han.guokai.blog.163.com/blog/static/13671827120112694851799/&quot;&gt;浏览器本地数据（sessionStorage、localStorage、cookie）与server端数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yuzhongwusan/archive/2011/12/19/2293347.html&quot;&gt;HTMl5的sessionStorage和localStorage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/xiaowei0705/archive/2011/04/19/2021372.html&quot;&gt;HTML5 LocalStorage 本地存储&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 May 2015 22:28:35 +0000</pubDate>
        <link>http://jerryzou.com/posts/cookie-and-web-storage/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/cookie-and-web-storage/</guid>
      </item>
    
      <item>
        <title>咀嚼之味</title>
        <description>&lt;p&gt;今天起，本博客更名为《咀嚼之味》。&lt;/p&gt;

&lt;p&gt;最近实在忙得不行，都好久没有发博文了，看了看上一次po文已经是三个月之前的事了。我不太喜欢生活的一切被各种事情占满，因为我有更多自己想做的事情，自己想研究的东西。我喜欢去思考一些感兴趣的东西，而繁忙却把这一切都夺走了。各种跳出来的杂事不断逼迫我不得不东奔西走，为了应付好我生活中的各种事情，我感到精疲力尽。用操作系统的概念来说，就是频繁的进程调度是极其消耗资源的。&lt;/p&gt;

&lt;p&gt;所以我讨厌繁忙！或者说，漫无目的的繁忙…&lt;/p&gt;

&lt;p&gt;说回到“咀嚼”。咀嚼是个非常慢节奏的词，不仅包含慢慢研磨食物的过程，还暗示了一种细细品味的涵义。我非常喜欢这个词带给我的感觉，所以我决定用它取代我的博客原本的名字，同时它也代表了一种我对生活的态度。&lt;/p&gt;

&lt;p&gt;我会继续在这个博客中分享更多关于我对技术、人生和世界的思考。谢谢关注！&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Apr 2015 22:38:54 +0000</pubDate>
        <link>http://jerryzou.com/posts/chew/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/chew/</guid>
      </item>
    
      <item>
        <title>使用Digital Ocean和shadowsocks来科学上网</title>
        <description>&lt;p&gt;使用了各种不稳定的VPN服务以后，我还是觉得自己搭VPS比较靠谱。Digital Ocean提供了可伸缩的VPS，最便宜的服务器是每个月$5，虽然对于学生来说不算便宜，但好在一开始充$5送$10，而且成功申请到Github Student pack的话，还可以得到$100。ShadowSocks是科学上网的利器，在Github上已经得到了五千多个Star，使用的人极多、影响极深。而且它对各个平台的支持也非常好，目前我在Windows/Mac/iOS三个平台上都完成了科学上网环境的搭建。&lt;/p&gt;

&lt;h2 id=&quot;digital-ocean&quot;&gt;Digital Ocean&lt;/h2&gt;

&lt;p&gt;首先注册账号，激活邮箱自不必说。激活后就会收到$10的奖励，但是仅仅这样还是无法在Digital Ocean上创建虚拟主机。你需要绑定信用卡或者直接向你的账户里冲入$5才能正式开始使用。我的话，是在paypal账号上绑定了一张银联的卡来付款的，按这几天的汇率大概¥31左右吧。（另外附上我的邀请链接，嘿嘿：&lt;a href=&quot;https://www.digitalocean.com/?refcode=09e0142818aa&quot;&gt;https://www.digitalocean.com/?refcode=09e0142818aa&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;然后你就可以创建你的云主机了，选择 $5/mon 的那一档来支撑shadowsocks的服务足矣。经过测试San Francisco的机房延迟最低，平均在230ms左右。而Singapore的机房延迟在280ms，还有5%左右的丢包率。所以经过几次创建后又销毁重新创建地倒腾，我最后还是选择了使用San Francisco的节点。另外操作系统的话，我选择的是&lt;code&gt;ubuntu 14.04 x64&lt;/code&gt;的。&lt;/p&gt;

&lt;h3 id=&quot;ssh-key&quot;&gt;创建SSH key&lt;/h3&gt;

&lt;p&gt;接下来可以添加SSH key，这一步不是必须的，但是我觉得使用SSH key比使用Digital Ocean为你创建的随机密码好一点。如果不想做这一步，或者你之前已经创建过SSH key的话，可以跳过这一部分。&lt;/p&gt;

&lt;h4 id=&quot;ssh-key-1&quot;&gt;什么是SSH key&lt;/h4&gt;

&lt;p&gt;SSH key是一个简单而又安全地连接到你的远端设备的方式，通过它你不需要在网络上传输你的密码。SSH key有public和private两部分，其中private部分存储在你的设备本地，而public部分则需要上传到远程设备上。当你通过ssh连接到远程设备上时，只有私钥和公钥匹配上才能登陆。&lt;/p&gt;

&lt;h4 id=&quot;ssh-key-2&quot;&gt;如何创建SSH key&lt;/h4&gt;

&lt;p&gt;第一步，首先查看你本地设备上是否有SSH keys。你可以运行以下指令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;cd ~/.ssh&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ls *.pub&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果没有任何输出，说明你需要创建一个新的SSH key：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;ssh-keygen -t rsa -C &amp;quot;email@example.com&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;后面的email请替换成你自己的email。接着你就会看到类似下面的信息：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Generating public/private rsa key pair.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Enter passphrase (empty for no passphrase): [Type a passphrase]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Enter same passphrase again: [Type passphrase again]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Now your SSH key will be generated.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Your identification has been saved in /Users/your_username/.ssh/id_rsa.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Your public key has been saved in /Users/your_username/.ssh/id_rsa.pub.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;The key fingerprint is:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db email@example.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;比如我的公钥就生成于：/Users/Jerry/.ssh/id_rsa.pub，接下来就可以把公钥内容传到Digital Ocean上了，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jerryblog-image.b0.upaiyun.com/blog/posts/DigitalOcean_sshkey.png&quot; alt=&quot;Digital Ocean SSH key&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;shadowsocks&quot;&gt;Shadowsocks&lt;/h2&gt;

&lt;p&gt;其实在shadowsocks的&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks&quot;&gt;github主页&lt;/a&gt;上有很详细地说明，但是为了本文的完整性，还是将这些操作放在本文中以供参考。&lt;/p&gt;

&lt;h3 id=&quot;shadowsocks-1&quot;&gt;在服务器端安装shadowsocks&lt;/h3&gt;

&lt;p&gt;首先需要远程登录到Digital Ocean的主机上，我租用的San Francisco的机房IP地址是104.236.177.232。而因为之前已经建好了SSH Key，所以直接用root用户登录即可：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;ssh root@104.236.177.232&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在 Debian / Ubuntu 下 安装shadowsocks&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;apt-get install python-pip&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;pip install shadowsocks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我在实际安装下发现很多依赖缺失，所以需要先执行一下：apt-get update。另外也有一些同学会选择CentOS的服务器，附上在CentOS下安装shadowsocks的方法：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;yum install python-setuptools &amp;amp;&amp;amp; easy_install pip&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;pip install shadowsocks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;shadowsocks-2&quot;&gt;启动shadowsocks服务&lt;/h3&gt;

&lt;p&gt;安装好shadowsocks以后，启动shadowsocks服务可以通过以下指令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;ssserver -p 8836 -k `password` -m rc4-md5&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;或者可以通过以下指令在后台启动shadowsocks的服务：
&lt;span class=&quot;go&quot;&gt;ssserver -p 8836 -k `password` -m rc4-md5 -d start&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ssserver -p 8836 -k `password` -m rc4-md5 -d stop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但上面的方法很不方便，我还是推荐使用配置文件的方法。首先创建一个文件：/etc/shadowsocks.json，示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;你的服务器ip地址&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;server_port&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;local_address&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;local_port&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;你设置的密码&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;aes-256-cfb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;fast_open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来你就可以使用下面这个指令启动服务&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;ssserver -c /etc/shadowsocks.json&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;或者在后台运行
&lt;span class=&quot;go&quot;&gt;ssserver -c /etc/shadowsocks.json -d start&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ssserver -c /etc/shadowsocks.json -d stop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;shadowsocks-3&quot;&gt;使用shadowsocks客户端&lt;/h3&gt;

&lt;p&gt;shadowsocks的客户端支持各大主流平台，而且客户端的配置一般都很简单，只需要配置一下服务器的ip地址和之前设置好的连接密码即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/projects/shadowsocksgui/files/dist/&quot;&gt;OS X&lt;/a&gt; / &lt;a href=&quot;https://sourceforge.net/projects/shadowsocksgui/files/dist/&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients#android&quot;&gt;Android&lt;/a&gt; / &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-iOS/wiki/Help&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients&quot;&gt;更多设备&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks&quot;&gt;Github Homepage for shadowsocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File&quot;&gt;Configuration via Config File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 24 Jan 2015 15:16:54 +0000</pubDate>
        <link>http://jerryzou.com/posts/shadowsocks-with-digitalocean/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/shadowsocks-with-digitalocean/</guid>
      </item>
    
      <item>
        <title>阿瞒究竟有没有杀伯奢？</title>
        <description>&lt;p&gt;阿瞒是曹操的小名，叫起来很亲切。我自幼喜欢孟德的雄才大略，小时候读《三国演义》一直把孟德当作主角，可惜他自古大多被演绎成奸恶之徒。&lt;/p&gt;

&lt;p&gt;在演义中，孟德刺杀董卓失败，逃亡途径谯郡。时任县令的陈宫捉住了孟德后，了解到他心中的大志向，于是决定罢官，与孟德同走。旅途又途径吕伯奢的家。伯奢是孟德父亲曹嵩的结义兄弟，当时天色已暗，孟德建议就在伯奢家借宿一晚。到了伯奢家，伯奢说家中无酒，于是骑驴上镇上沽酒。而孟德与陈宫坐厅中等待之时，忽闻后院有磨刀声。于是两人走过去，在厨房门口听到里面说道：“缚而杀之，何如？”这下孟德吓坏了，心想这些人是要拿我去领赏啊！于是和陈宫二人拔剑进去将伯奢一家八口人都杀了，完事了才发现地上有只被困起来的猪在哼哼，这才知道错杀了好人。两人赶紧出门，却正好碰上沽酒归来的伯奢。孟德怕伯奢会败露自己的行踪，于是干脆把伯奢也一并杀害了。这些让陈宫感到胆寒，他质问孟德为何要杀死伯奢，而孟德说：“宁教我负天下人，休教天下人负我”。这句话流传甚广，也充分表现出孟德多疑的心理。&lt;/p&gt;

&lt;p&gt;但演义终究是演义，它并不是史书。作为一个喜欢孟德的人，我决定还是看看其他史料有没有关于这段历史的记载。&lt;/p&gt;

&lt;p&gt;在裴松之作注的《三国志》是为孟德的黑历史翻案而被引用最多的，其中这样说道：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;魏曰：太祖以卓终必覆败，遂不就拜，逃归乡里。从数骑过故人成皋吕伯奢；伯奢不在，其子与宾客共劫太祖，取马及物，太祖手刃击杀数人。
&lt;br /&gt;世语曰：太祖过伯奢。伯奢出行，五子皆在，备宾主礼。太祖自以背卓命，疑其图己，手剑夜杀八人而去。
&lt;br /&gt;孙盛杂记曰：太祖闻其食器声，以为图己，遂夜杀之。既而凄怆曰：“宁我负人，毋人负我！”遂行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而在陈寿的《三国志》原著中，并没有提到伯奢之事。陈寿编写《三国志》之时，以王沈的《魏书》和鱼豢的《魏略》为参考，却去掉了有关伯奢的段落，这真是耐人寻味。《魏书》成书时正值曹魏，所以后人常称：“多为时讳，未若陈寿之实录也。”《魏书》美化太祖的可能性较大，参考价值较低。所以孟德错杀好人大概是没跑了。孟德很有可能因多疑而杀了伯奢。阿瞒凭借着自己傲人的才略雄踞一方，却也正因为多疑，断送了自己的性命，这大概就是宿命吧。&lt;/p&gt;

&lt;p&gt;但此时我突然冒出了一个问题：为什么以上四段史料中都未出现陈公台的身影？莫非陈宫救曹操仅仅只是演义中的杜撰？&lt;/p&gt;

&lt;p&gt;《三国志·魏书·吕布传》注引《典略》：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;陈宫字公台，东郡人也。刚直烈壮，少与海内知名之士皆相连结。及天下乱，始随太祖……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《三国志·曹操传》：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;及在兖州，陈留边让言议颇侵太祖，太祖杀让，族其家。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《三国志·袁绍传》中裴松之注载袁绍手下陈琳所写的讨伐曹操的檄文：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;故九江太守边让，英才俊逸，天下知名，以直言正色，论不阿谄，身首被枭县之戮，妻孥受灰灭之咎。自是士林愤痛，民怨弥重，一夫奋臂，举州同声，故躬破于徐方，地夺于吕布，彷徨东裔，蹈据无所。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可见陈宫并没有与孟德一起逃亡，一说直到初平二年（191年）曹操任东郡太守时，陈宫才成为他的部下。而陈宫因孟德杀死伯奢，进而感到孟德的可怕更是无从考证，大多都是罗贯中的演绎。更多的史料倾向于认为是孟德杀了边让才使得陈宫自危，所以背叛了孟德。&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jan 2015 22:33:54 +0000</pubDate>
        <link>http://jerryzou.com/posts/caocao01/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/caocao01/</guid>
      </item>
    
      <item>
        <title>Don&#39;t be evil ?</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;尽信书，则不如无书。 ———— 《孟子》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天是2014年的最后一天，原本和欢欢说好一起吃晚饭。可是中行偏偏又要开什么新员工大会，从六点多一直开到九点多！结果只是不断地给新员工压力而已，于是就跟欢欢说起银行的各种恶性竞争与病态的价值观！然后～就扯到了谷歌的“不作恶”。&lt;/p&gt;

&lt;p&gt;其实对于谷歌，我一直以来都是非常仰慕的。它在我印象中一直是一家走在科技最前沿的公司，并且有自己的节操底线——“不作恶”。谷歌是一家很伟大的科技公司是没错啦！但是我对“不作恶”的了解却甚少，关于这点欢欢与我就发生了分歧。她并不认为谷歌“不作恶”，而棱镜门的曝光更加是凸显了其“作恶”啊。&lt;/p&gt;

&lt;p&gt;这让我陷入了思考。我一直以来关注地都是谷歌在技术方面的成就，而忽视了其他方面。所以说，谷歌曾经在我心目中的形象是被神化的，它并不真实！我觉得我应该从“don’t be evil”开始，重新审视一下这家公司。&lt;/p&gt;

&lt;p&gt;Don’t be evil 是一句广为流传的体现谷歌价值观的话。在谷歌官网上的&lt;a href=&quot;http://www.google.com/about/company/philosophy/&quot;&gt;《Ten things we know to be true》&lt;/a&gt;第六条的正式描述是：”You can make money without doing evil”。我节选了几句核心的话放在下面，其实也就是每一段的第一句啦：&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;Google is a business…&lt;/li&gt;
    &lt;li&gt;We don’t allow ads to be displayed on our results pages unless they are relevant where they are shown…&lt;/li&gt;
    &lt;li&gt;We believe that advertising can be effective without being flashy…&lt;/li&gt;
    &lt;li&gt;Advertising on Google is always clearly identified as a “Sponsored Link,” so it does not compromise the integrity of our search results…&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;“不作恶”在谷歌官方的解释最确切的说法是：我们不会用龌蹉的手段赚钱。仅这点来说，谷歌确实会比某度好些，毕竟某度搜索的推广铺天盖地、某度杀毒的各种流氓大家也是知道的。但是这样的说来，“不作恶”的含义就一直被我曲解了。我相信不只是我一个人放大了“不作恶”的含义。在这种“不作恶”的光环下，谷歌在我心中一直占据着比较神圣的地位。而这种想法又的确是很盲目的，因为随着我认知得不断成长，仅仅凭这3个字，它已经不能说服我了。&lt;/p&gt;

&lt;p&gt;棱镜门中的谷歌，的确将“Google is a business”的事实暴露了出来。Google作为一家巨无霸级别的商业公司，在一定程度上配合政府是无法避免的。在棱镜事件中，谷歌只是声明他们并没有提供给政府直接访问数据库的权利。但这也恰恰证实了，谷歌的确向政府以某种其他方式间接地提供数据。这是否是有悖于“Don’t be evil”呢？至少从谷歌官方的价值观来看，是无法考量的，因为Google只是说“不在挣钱的时候作恶”啊。而在我看来，世界上所有的大型企业都会受到政府的管制。而马云曾经在谷歌退出中国的时候，还批评谷歌并声称会无条件配合政府的审查呢？那阿里是在“be evil”吗？&lt;/p&gt;

&lt;p&gt;说到底这些公司只是顺应时代的大潮，迎合也好，无奈也罢，但无关作恶还是不作恶，因为真正能做到所谓“不作恶”的公司还没发展起来就完蛋了。不管怎么样，谷歌在我心目中还是很伟大的，当然我只是针对它那些优秀的技术与产品。同时我也要跟“Don’t be evil”那过于神圣的光环说再见了，你就留在2014年吧，拜拜。&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 02:29:10 +0000</pubDate>
        <link>http://jerryzou.com/posts/dontBeEvil/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/dontBeEvil/</guid>
      </item>
    
      <item>
        <title>使用plupload绕过服务器，批量上传图片到又拍云</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;综述&lt;/h2&gt;

&lt;p&gt;论坛或者贴吧经常会需要分享很多图片，上传图片比较差的做法是上传到中央服务器上，中央服务器再转发给静态图片服务器。而这篇文章讲介绍如何使用plupload对上传过程进行优化，并绕过服务器直接批量上传图片到又拍云上的方法。我写了一个Demo，大家可以到&lt;a href=&quot;http://zry656565.github.io/bulk-upload-to-UPYUN/&quot;&gt;http://zry656565.github.io/bulk-upload-to-UPYUN/&lt;/a&gt;查看，而本文集中会讲到以下几个重点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plupload库&lt;/li&gt;
  &lt;li&gt;图片的本地压缩&lt;/li&gt;
  &lt;li&gt;多选图片&lt;/li&gt;
  &lt;li&gt;绕过服务器直接批量上传图片到又拍云
    &lt;ul&gt;
      &lt;li&gt;使用又拍的HTTP FORM API&lt;/li&gt;
      &lt;li&gt;plupload的配置&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plupload&quot;&gt;plupload库&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.plupload.com/&quot;&gt;plupload&lt;/a&gt;是一个支持非常丰富的图片上传插件。可以对低版本的浏览器通过&lt;strong&gt;Flash/Silverligh/html4&lt;/strong&gt;支持批量上传，而在高版本浏览器中则会优先使用&lt;strong&gt;html5&lt;/strong&gt;接口上传，这一切的判定都是自动的，可以说使用起来非常方便！其次plupload还支持在&lt;strong&gt;客户端压缩图片、直接Drag&amp;amp;Drop&lt;/strong&gt;来上传等功能，具体大家就可以到它的官网上了解更多的信息。&lt;/p&gt;

&lt;p&gt;在这里我们仅使用它的核心API，只需要引入一个文件即可。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lib/plupload-2.1.2/js/plupload.full.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;官方给出的核心API例子非常简单，可以直接移步&lt;a href=&quot;http://www.plupload.com/examples/core&quot;&gt;http://www.plupload.com/examples/core&lt;/a&gt;查看。核心API在理解上不存在什么困难，如果需要帮助可以在本文后面向我提问。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;图片的本地压缩&lt;/h2&gt;

&lt;p&gt;一般在网页中浏览的图片质量需求不高，记得当初高中上课学PS，老师说网上的图片分辨率设72就好了，打印的图片的话得设300。所以用户在上传一张很大的照片时，比较好的做法是现在用户的客户端本地压缩好这张图片，并把压缩后较小的图片上传，既不影响浏览效果，同时也能加快上传速度，减小服务器的负担。&lt;/p&gt;

&lt;p&gt;图片的本地压缩功能在plupload中是支持的，只要在初始化它的时候传入一个&lt;code&gt;resize&lt;/code&gt;参数就好了。其中，宽度和高度可以根据实际情况设置，而&lt;code&gt;quality&lt;/code&gt;是比较重要的一个参数，顾名思义，这个值设置得越小，图片越小，但显示的质量也会越差，这个就需要你自己权衡一下啦。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;resize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;quality&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;多选图片&lt;/h2&gt;

&lt;p&gt;批量上传图片的一个前置条件就是能够多选图片。多选文件是HTML5的一个标准特性，我们可以通过如下方式来开启多选模式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Select images: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;img&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- multiple 在这儿是关键！--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;根据一个非常优秀的jquery插件jQuery-File-Upload的&lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload/wiki/Browser-support&quot;&gt;浏览器支持&lt;/a&gt;中&lt;strong&gt;Multiple File selection&lt;/strong&gt;这个小节所写的那样，IE一直发展到&lt;code&gt;IE10&lt;/code&gt;才刚开始支持这个HTML5的特性，那么我们又不得不借助Flash神奇的力量来对低版本浏览器进行多选图片的支持。幸运的是plupload已经帮我们做到了这一点，而且这一开关是默认开启的。如果你觉得你不需要用到多选图片，你可以设置&lt;code&gt;multi_selection: false&lt;/code&gt;来关闭这个特性。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;绕过服务器直接批量上传图片到又拍云&lt;/h2&gt;

&lt;p&gt;又拍云提供了HTTP FORM API。通过这个接口，我们就可以直接从浏览器端发起上传图片的请求，而不需要通过我们自己的服务器进行中转，大大降低了开销。&lt;/p&gt;

&lt;h4 id=&quot;http-form-api&quot;&gt;使用又拍的HTTP FORM API&lt;/h4&gt;

&lt;p&gt;使用这个接口，就需要向又拍云发送一个表单。这个表单包含你所要上传的文件，并且还需要包含&lt;code&gt;policy&lt;/code&gt;和&lt;code&gt;signature&lt;/code&gt;。Policy用于将上传请求相关的参数，例如保存路径，文件类型，预处理结果等，另外，也包含了上传请求授时间等。而Signature用于安全校验。&lt;/p&gt;

&lt;p&gt;为了演示方便，此处直接使用javascript来生成Policy和Signature。&lt;strong&gt;但在实际使用中，为了安全性考虑，请在服务器端完成这个过程。&lt;/strong&gt;下面的代码在官方的demo基础上做了些许修改，主要是使用了官方的测试帐号，关于这两个参数的具体生成方法，请参考官方的文档：&lt;a href=&quot;http://docs.upyun.com/api/form_api/&quot;&gt;http://docs.upyun.com/api/form_api/&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;bucket&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;demonstration&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;save-key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/test/filename.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;expiration&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 查看更多参数：http://docs.upyun.com/api/form_api/#表单API接口简介&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 从 UPYUN 用户管理后台获取表单 API&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form_api_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1+JY2ZqD5UVfw6hQ8EesYQO50Wo=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 计算签名&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form_api_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;plupload-1&quot;&gt;plupload的配置&lt;/h4&gt;

&lt;p&gt;如何使得plupload可以配合又拍云的HTTP FORM API，着实让我头疼了一番。在查看plupload的文档中，无意中的发现却让我看到了曙光，&lt;a href=&quot;http://www.plupload.com/docs/Upload-to-Amazon-S3&quot;&gt;Upload to Amazon S3&lt;/a&gt;这个链接吸引了我。&lt;code&gt;Amazon S3&lt;/code&gt;的全称是Amazon Simple Storage Service，它提供的云存储服务多多少少和又拍云有些相似。&lt;/p&gt;

&lt;p&gt;于是根据这篇文章中关于浏览器端配置的介绍，我琢磨出了上传到又拍云所需要的配置。其实说起来也很简单，主要就是对&lt;code&gt;url&lt;/code&gt;和&lt;code&gt;multipart_params&lt;/code&gt;两个参数进行配置。下面的例子中的&lt;code&gt;options.bucket&lt;/code&gt;、&lt;code&gt;policy&lt;/code&gt;和&lt;code&gt;signature&lt;/code&gt;直接使用上一节计算出来的值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plupload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Uploader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://v0.api.upyun.com/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;multipart_params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;Filename&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;${filename}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// adding this to keep consistency across the runtimes&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;policy&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;如此这般，终于实现了通过plupload绕过服务器，向又拍云批量上传图片了。plupload真是一个很强大的库，不过它对商业使用可以需要收费的哦，具体还是到它的官网上去了解吧！虽然在开头已经提过了，这里还是在唠叨一句：最终的demo效果可以到我创建的项目中看到，丢下链接：&lt;a href=&quot;http://zry656565.github.io/bulk-upload-to-UPYUN/&quot;&gt;http://zry656565.github.io/bulk-upload-to-UPYUN/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.upyun.com/api/form_api/&quot;&gt;又拍云文档 － HTTP FORM API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/upyun/js-form-api/blob/master/demo.html&quot;&gt;又拍云官方js调用demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.plupload.com/docs/Upload-to-Amazon-S3&quot;&gt;plupload - Upload to Amazon S3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.plupload.com/punbb/viewtopic.php?id=1681&quot;&gt;plupload - plupload ignores server side error messages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 29 Nov 2014 01:25:10 +0000</pubDate>
        <link>http://jerryzou.com/posts/bulkUploadToUPYUN/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/bulkUploadToUPYUN/</guid>
      </item>
    
      <item>
        <title>来，让我们谈一谈 Normalize.css</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文译自Normalize.css官网: &lt;a href=&quot;http://nicolasgallagher.com/about-normalize-css/&quot;&gt;http://nicolasgallagher.com/about-normalize-css/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;Normalize.css&lt;/a&gt; 只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的&lt;code&gt;CSS reset&lt;/code&gt;，&lt;code&gt;Normalize.css&lt;/code&gt;是一种现代的、为HTML5准备的优质替代方案。&lt;code&gt;Normalize.css&lt;/code&gt;现在已经被用于&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Twitter Bootstrap&lt;/a&gt;、&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML5 Boilerplate&lt;/a&gt;、&lt;a href=&quot;http://www.gov.uk/&quot;&gt;GOV.UK&lt;/a&gt;、&lt;a href=&quot;http://www.rdio.com/&quot;&gt;Rdio&lt;/a&gt;、&lt;a href=&quot;http://css-tricks.com/&quot;&gt;CSS Tricks&lt;/a&gt; 以及许许多多其他框架、工具和网站上。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;Normalize.css 项目地址&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/necolas/normalize.css&quot;&gt;Normalize.css 在GitHub上的源码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;综述&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Normalize.css&lt;/code&gt;是一种&lt;code&gt;CSS reset&lt;/code&gt;的替代方案。经过&lt;a href=&quot;https://twitter.com/necolas&quot;&gt;@necolas&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/jon_neal&quot;&gt;@jon_neal&lt;/a&gt;花了几百个小时来努力研究不同浏览器的默认样式的差异，这个项目终于变成了现在这样。&lt;/p&gt;

&lt;p&gt;我们创造&lt;code&gt;normalize.css&lt;/code&gt;有下面这几个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;保护有用的浏览器默认样式&lt;/strong&gt;而不是完全去掉它们&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;一般化的样式&lt;/strong&gt;：为大部分HTML元素提供&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;修复浏览器自身的bug&lt;/strong&gt;并保证各浏览器的一致性&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;优化CSS可用性&lt;/strong&gt;：用一些小技巧&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;解释代码&lt;/strong&gt;：用注释和详细的文档来&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Normalize.css&lt;/code&gt;支持包括手机浏览器在内的超多浏览器，同时对HTML5元素、排版、列表、嵌入的内容、表单和表格都进行了一般化。尽管这个项目基于一般化的原则，但我们还是在合适的地方使用了更实用的默认值。&lt;/p&gt;

&lt;h2 id=&quot;normalize-vs-reset&quot;&gt;Normalize vs Reset&lt;/h2&gt;

&lt;p&gt;知道&lt;code&gt;Normalize.css&lt;/code&gt;和传统&lt;code&gt;Reset&lt;/code&gt;的区别是非常有价值的。&lt;/p&gt;

&lt;h5 id=&quot;normalizecss-&quot;&gt;1. Normalize.css 保护了有价值的默认值&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;Reset&lt;/code&gt;通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。相比之下，&lt;code&gt;Normalize.css&lt;/code&gt;保持了许多默认的浏览器样式。这就意味着你不用再为所有公共的排版元素重新设置样式。当一个元素在不同的浏览器中有不同的默认值时，&lt;code&gt;Normalize.css&lt;/code&gt;会力求让这些样式保持一致并尽可能与现代标准相符合。&lt;/p&gt;

&lt;h5 id=&quot;normalizecss-bug&quot;&gt;2. Normalize.css 修复了浏览器的bug&lt;/h5&gt;

&lt;p&gt;它修复了常见的桌面端和移动端浏览器的bug。这往往超出了&lt;code&gt;Reset&lt;/code&gt;所能做到的范畴。关于这一点，&lt;code&gt;Normalize.css&lt;/code&gt;修复的问题包含了HTML5元素的显示设置、预格式化文字的&lt;code&gt;font-size&lt;/code&gt;问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。&lt;/p&gt;

&lt;p&gt;可以看以下这个例子，看看对于HTML5中新出现的&lt;code&gt;input&lt;/code&gt;类型&lt;code&gt;search&lt;/code&gt;，&lt;code&gt;Normalize.css&lt;/code&gt;是如何保证跨浏览器的一致性的。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; * 1. Addresses appearance set to searchfield in S5, Chrome&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; * 2. Addresses box-sizing set to border-box in S5, Chrome (include -moz to future-proof)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textfield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 1 */&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 2 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; * Removes inner padding and search cancel button in S5, Chrome on OS X&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:-webkit-search-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:-webkit-search-cancel-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;normalizecss--1&quot;&gt;3. Normalize.css 不会让你的调试工具变的杂乱&lt;/h5&gt;

&lt;p&gt;使用Reset最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链，如下图所示。在&lt;code&gt;Normalize.css&lt;/code&gt;中就不会有这样的问题，因为在我们的准则中对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jerryblog-image.b0.upaiyun.com/blog/css-reset-debugging.png&quot; alt=&quot;A common sight in browser debugging tools when using a CSS reset&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;normalizecss--2&quot;&gt;4. Normalize.css 是模块化的&lt;/h5&gt;

&lt;p&gt;这个项目已经被拆分为多个相关却又独立的部分，这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。&lt;/p&gt;

&lt;h5 id=&quot;normalizecss--3&quot;&gt;5. Normalize.css 拥有详细的文档&lt;/h5&gt;

&lt;p&gt;Normalize.css的代码基于详细而全面的跨浏览器研究与测试。这个文件中拥有详细的代码说明并在&lt;a href=&quot;https://github.com/necolas/normalize.css/wiki&quot;&gt;Github Wiki&lt;/a&gt;中有进一步的说明。这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、浏览器之间的差异，并且你可以更容易地进行自己的测试。&lt;/p&gt;

&lt;p&gt;这个项目的目标是帮助人们了解浏览器默认是如何渲染元素的，同时也让人们很容易地明白如何改进浏览器渲染。&lt;/p&gt;

&lt;h2 id=&quot;normalizecss&quot;&gt;如何使用 normalize.css&lt;/h2&gt;

&lt;p&gt;首先，安装或从Github&lt;a href=&quot;http://necolas.github.com/normalize.css/&quot;&gt;下载Normalize.css&lt;/a&gt;，接下来有两种主要途径去使用它。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;策略一：将&lt;code&gt;normalize.css&lt;/code&gt;作为你自己项目的基础CSS，自定义样式值以满足设计师的需求。&lt;/li&gt;
  &lt;li&gt;策略二：引入&lt;code&gt;normalize.css&lt;/code&gt;源码并在此基础上构建，在必要的时候用你自己写的CSS覆盖默认值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;无论从适用范畴还是实施上，&lt;code&gt;Normalize.css&lt;/code&gt;与&lt;code&gt;Reset&lt;/code&gt;都有极大的不同。尝试一下这两种方法并看看到底哪种更适合你的开发偏好是非常值得的。这个项目在Github上以开源的形式开发。任何人都能够提交问题报告或者提交补丁。整个项目发展的过程对所有人都是可见的，而每一次改动的原因也都写在commit信息中，这些都是有迹可循的。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;相关阅读&lt;/h2&gt;

&lt;p&gt;关于更多默认UA样式的详细信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints&quot;&gt;WHATWG suggestions for rendering HTML documents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://iecss.com/&quot;&gt;Internet Explorer User Agent Style Sheets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-class.com/test/css/defaults/UA-style-sheet-defaults.htm&quot;&gt;CSS2.1 User Agent Style Sheet Defaults&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 18 Nov 2014 22:23:10 +0000</pubDate>
        <link>http://jerryzou.com/posts/aboutNormalizeCss/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/aboutNormalizeCss/</guid>
      </item>
    
      <item>
        <title>发生在升级OS X Yosemite后：修复各种开发环境</title>
        <description>&lt;p&gt;终于还是忍不住升级了，促使我升级的原动力居然是&lt;code&gt;Alfred&lt;/code&gt;的Yosemite theme居然比初始theme好看很多！在升级前就预想到我的开发环境是一定会被破坏的，所以升级好系统以后还是赶快看下发生了什么吧！&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;一进新系统就发现&lt;code&gt;phpstorm&lt;/code&gt;跪了，提示要装&lt;code&gt;jre6&lt;/code&gt;才能用。好吧，然后陆陆续续逐渐发现好多东西都跪了。只能一个一个慢慢修复啦。目前可见的发生错误的环境有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PhpStorm&lt;/li&gt;
  &lt;li&gt;Homebrew&lt;/li&gt;
  &lt;li&gt;node.js&lt;/li&gt;
  &lt;li&gt;Apache&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;逐个击破&lt;/h2&gt;

&lt;h3 id=&quot;phpstorm&quot;&gt;1. PhpStorm&lt;/h3&gt;

&lt;p&gt;升级了Yosemite以后，按一般的尿性，苹果肯定会升级所有运行环境的版本的，其中少不了Java，因此PhpStorm躺枪。肯定有同学要问啊，为什么&lt;code&gt;JetBrains&lt;/code&gt;这种被誉为史上最屌霸天的IDE厂商所使用的jdk版本这么低！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JetBrains&lt;/code&gt;如是说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Current JDK 1.7 and 1.8 versions have several critical issues. We can’t default to the new JDK version until these issues are resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，解决方法就是下个jre6嘛！结果我在oracle的网站上找了半天却只能找到提供给OS X的jre7和jre8。好吧，其实直接在苹果官网上就可以找到下载链接：&lt;a href=&quot;http://support.apple.com/kb/DL1572&quot;&gt;http://support.apple.com/kb/DL1572&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;homebrew&quot;&gt;2. Homebrew&lt;/h3&gt;

&lt;p&gt;Homebrew的运行离不开Ruby，升级后运行不了的原因其实也就是内置于Yosemite的Ruby版本更新啦：&lt;code&gt;1.8 =&amp;gt; 2.0&lt;/code&gt;。想要运行brew就会得到如下错误信息：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;/usr/local/Library/brew.rb: /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby: bad interpreter: No such file or directory&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在网上找到解决办法如下：&lt;/p&gt;

&lt;h5 id=&quot;brew&quot;&gt;2.1 更新&lt;code&gt;brew&lt;/code&gt;脚本&lt;/h5&gt;
&lt;p&gt;用你喜欢的编辑器打开&lt;code&gt;/usr/local/bin/brew&lt;/code&gt;，然后将&lt;code&gt;brew&lt;/code&gt;检测系统的一段代码注释掉，具体如下所示：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#BREW_SYSTEM=$(uname -s | tr &amp;quot;[:upper:]&amp;quot; &amp;quot;[:lower:]&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#if [ &amp;quot;$BREW_SYSTEM&amp;quot; = &amp;quot;darwin&amp;quot; ]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#then&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    exec &amp;quot;$BREW_LIBRARY_DIRECTORY/brew.rb&amp;quot; &amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;W0&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BREW_LIBRARY_DIRECTORY/brew.rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;section-2&quot;&gt;2.2 创建软链接&lt;/h5&gt;

&lt;p&gt;Homebrew会通过&lt;code&gt;Ruby 1.8&lt;/code&gt;的路径去找Ruby的运行环境，可惜在Yosemite里它再也找不到了。所以在Homebrew做出一定的改变以前，我们需要骗骗它，建立一个假的&lt;code&gt;Ruby 1.8&lt;/code&gt;的地址，其实指向系统的&lt;code&gt;Ruby 2.0&lt;/code&gt;运行环境。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo mkdir -p /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo ln -s /usr/bin/ruby /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;nodejs&quot;&gt;3. node.js&lt;/h3&gt;

&lt;p&gt;好吧，其实写这篇博客的时候只发现前面两个问题。可是当我用&lt;code&gt;grunt&lt;/code&gt;来自动生成我的博客时，却收到了&lt;code&gt;env: node: No such file or directory&lt;/code&gt;这样的错误信息。看来node也在这次升级中惨烈牺牲了啊。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;/usr/local/bin/&lt;/code&gt;下已经找到&lt;code&gt;node&lt;/code&gt;和&lt;code&gt;npm&lt;/code&gt;却发现是无法打开的，依旧会提示&lt;code&gt;No such file or directory&lt;/code&gt;。目前还是不太清楚是什么原因造成的，最后解决的办法也比较暴力：直接到node官网上下了个最新的pkg直接重新安装一下就好了。&lt;/p&gt;

&lt;h3 id=&quot;apache&quot;&gt;4. Apache&lt;/h3&gt;

&lt;p&gt;要本地调试代码的时候发现&lt;code&gt;Apache&lt;/code&gt;也不能幸免地跪了。执行&lt;code&gt;apachectl -v&lt;/code&gt;发现Apache已经更新到&lt;code&gt;2.4.9&lt;/code&gt;版本了。一定又是因为版本更新出了什么差错。&lt;/p&gt;

&lt;h5 id=&quot;httpdconf&quot;&gt;4.1 修改httpd.conf&lt;/h5&gt;

&lt;p&gt;首先打开&lt;code&gt;/private/etc/apache2/httpd.conf&lt;/code&gt;发现似乎恢复默认的设置了。重新将以下两行代码解注：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;Include /private/etc/apache2/extra/httpd-vhosts.conf&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;LoadModule php5_module libexec/apache2/libphp5.so&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;httpd-vhostsconf&quot;&gt;4.2 修改httpd-vhosts.conf&lt;/h5&gt;

&lt;p&gt;打开&lt;code&gt;private/etc/apache2/extra/httpd-vhosts.conf&lt;/code&gt;发现之前设好的虚拟主机似乎没有被修改掉嘛！但因为升级到&lt;code&gt;Apache 2.4&lt;/code&gt;以上设置需要一定的调整，不然就会得到&lt;code&gt;403 Forbidden You don&#39;t have permission to access / on this server&lt;/code&gt;错误啦。&lt;/p&gt;

&lt;p&gt;将原本的&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot; data-lang=&quot;apacheconf&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;*:80&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;ServerAdmin&lt;/span&gt; zry656565@gmail.com
    &lt;span class=&quot;nb&quot;&gt;DocumentRoot&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Jerry/Dev/apache/php_tester&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;ServerName&lt;/span&gt; php_tester
    &lt;span class=&quot;nb&quot;&gt;ErrorLog&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Jerry/Dev/apache/php_tester/log/sites-error_log&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;CustomLog&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Jerry/Dev/apache/php_tester/log/sites-access_log&amp;quot;&lt;/span&gt; common
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Options&lt;/span&gt; Indexes FollowSymLinks Includes ExecCGI
        &lt;span class=&quot;nb&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Order&lt;/span&gt; deny,allow
        &lt;span class=&quot;nb&quot;&gt;Allow&lt;/span&gt; from &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;改成&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot; data-lang=&quot;apacheconf&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;*:80&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;ServerAdmin&lt;/span&gt; zry656565@gmail.com
    &lt;span class=&quot;nb&quot;&gt;DocumentRoot&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Jerry/Dev/apache/php_tester&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;ServerName&lt;/span&gt; php_tester
    &lt;span class=&quot;nb&quot;&gt;ErrorLog&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Jerry/Dev/apache/php_tester/log/sites-error_log&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;CustomLog&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Jerry/Dev/apache/php_tester/log/sites-access_log&amp;quot;&lt;/span&gt; common
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Options&lt;/span&gt; Indexes FollowSymLinks Includes ExecCGI
        &lt;span class=&quot;nb&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt; granted
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其实就是将&lt;code&gt;Order deny,allow, Allow from all&lt;/code&gt;改成&lt;code&gt;Require all granted&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;mysql&quot;&gt;5. MySQL&lt;/h3&gt;

&lt;p&gt;MySQL目前还没有正式支持OS X Yosemite，所以在升级系统后会发现，MySQL的服务居然没有在后台启动。要解决这个问题只有手动启动MySQL的服务，建议在&lt;code&gt;~/.bash_profile&lt;/code&gt;中加入如下脚本，然后用&lt;code&gt;source ~/.bash_profile&lt;/code&gt;启用脚本。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSQL_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/mysql/bin
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start_mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo $MYSQL_HOME/mysqld_safe &amp;amp;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stop_mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo $MYSQL_HOME/mysqladmin shutdown&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来，你只需要使用&lt;code&gt;start_mysql&lt;/code&gt;和&lt;code&gt;stop_mysql&lt;/code&gt;指令就可以开关mysql服务啦！&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;其实本来还会发上第六条的：git。因为我发现我想把这篇博文发到github的博客上去却失败了！找了半天原因却摸不着头脑。后来突发奇想在gitcafe上创建了个项目居然push成功了，说明不是本地的git的问题，而是github的问题。过了一天才成功发上来还真是蛋疼！&lt;/p&gt;

&lt;p&gt;以上这些解决方案在我本地都能够解决问题，如果你还有什么疑问，可以在博文下留言，说不定能帮到你。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tuicool.com/articles/iIvy2e&quot;&gt;Homebrew, Ruby, and Rails on OS X 10.10&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://laravel-news.com/2014/10/fix-phpstorm-java-error-yosemite/&quot;&gt;Fix the PhpStorm Java Error with Yosemite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10873295/error-message-forbidden-you-dont-have-permission-to-access-on-this-server#&quot;&gt;Error message “Forbidden You don’t have permission to access / on this server”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7927854/start-mysql-server-from-command-line-on-mac-os-lion&quot;&gt;start mySQL server from command line on Mac OS Lion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-5&quot;&gt;更新&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2014.11.16 添加apache、mysql的恢复&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 22:12:10 +0000</pubDate>
        <link>http://jerryzou.com/posts/getDevEnvironmentBack/</link>
        <guid isPermaLink="true">http://jerryzou.com/posts/getDevEnvironmentBack/</guid>
      </item>
    
  </channel>
</rss>
